declaration:
  call: declare
  version: 0.1
  name: "Today"
  description: "Checks if today is a national holiday"
  method: GET
  accepts: JSON
  returns: JSON
  namespace: common-services
  allowlist:
    body:
      - field: chatId
        type: string
        description: "The chat ID for the message"
      - field: authorId
        type: string
        description: "The author ID for the message"

prepare:
  assign:
    chatId: ${incoming.params.chatId}
    authorId: ${incoming.params.authorId}
    startDate: ${new Date().toISOString().split("T")[0]}
  next: makeApiCall

makeApiCall:
  call: http.get
  args:
    url: https://openholidaysapi.org/PublicHolidays?countryIsoCode=EE&languageIsoCode=EE&validFrom=${startDate}&validTo=${startDate}
    headers:
      accept: application/json
  result: holiday

checkHolidays:
  switch:
    - condition: ${holiday.response.statusCodeValue >= 400}
      next: errorResponse
    - condition: ${holiday.response.body.length == 0}
      next: assignNotFound
  next: assignResult

errorResponse:
  assign:
    res: {
      "result": "Kahjuks ei õnnestunud hetkel pühade andmeid laadida. See võib olla ajutine tehniline probleem. Palun proovige hiljem uuesti."
    }
  next: formatMessages

assignNotFound:
  assign:
    res: {
      "result": "Täna ei ole riigipüha."
    }
  next: formatMessages

assignResult:
  assign:
    res: {
      "result": "Jah, täna on ${holiday.response.body[0].name[0].text}"
    }
  next: formatMessages

formatMessages:
  call: http.post
  args:
    url: "[#DMAPPER]/common-services/hbs/bot_responses_to_messages"
    headers:
      type: json
    body:
      data:
        {
          "botMessages": "${[res]}",
          "chatId": "${chatId}",
          "authorId": "${authorId}",
          "authorFirstName": "",
          "authorLastName": "",
          "authorTimestamp": "${new Date().toISOString()}",
          "created": "${new Date().toISOString()}",
        }
  result: formatMessage

return_result:
  return: ${formatMessage.response.body}
